import tkinter
from tkinter import *
import mysql.connector
from tkinter import messagebox
from tkinter import ttk

main_database = mysql.connector.connect(
    host="localhost",
    user="root",
    passwd="Anciso-320910",
    database="login_database"
)
cursordb = main_database.cursor()


def login_verification():
    user_verification = username_terminal.get()
    pass_verification = password_terminal.get()
    sql = "SELECT * FROM login_credentials WHERE username = %s and passowrd = %s"
    cursordb.execute(sql, [user_verification, pass_verification])
    results = cursordb.fetchall()
    if results:
        for i in results:
            messagebox.showinfo("Successful", f"Login complete, hello {username.get()}")
            frame.destroy()
            label.destroy()
            main.title("INVENTORY MANAGEMENT")
            new_icon = PhotoImage(file='icons8-inventory-64.png')
            main.iconphoto(True, new_icon)
            main.config(bg="#B1D0E0")
            new_frame = Frame(main)
            new_label = Label(new_frame, bg='white', height=35, width=80)
            Label(new_frame, bg='white', text="INVENTORY MANAGEMENT", font=('arial', 10, 'bold')).pack()
            new_label.pack()
            new_frame.place(x=40, y=20)
            Button(new_frame, text='Shipping              ', font=('arial', 10, 'bold'), image=Check_Stocks,
                   compound='left',
                   bg='#B4F8C8', activebackground='red',
                   relief=RAISED, command=lambda: shipping_data()).place(x=305, y=49)
            Button(new_frame, text='Update Employee\nDatabase  ', font=('arial', 9, 'bold'),
                   image=check_employee, compound='left', bg='#B4F8C8',
                   activebackground='red', relief=RAISED, command=lambda: update_employee()).place(x=40, y=212)
            Button(new_frame, text='Update Customer\nDatabase  ', font=('arial', 9, 'bold'), image=customer_check,
                   compound='left', bg='#B4F8C8', relief=RAISED,
                   activebackground='red', command=lambda: update_customer()).place(x=40, y=376)
            Button(new_frame, text=' Update Stocks    \n Database', font=('arial', 9, 'bold'), image=photo1,
                   compound='left', bg='#B4F8C8', relief=RAISED,
                   activebackground='red', command=lambda: update_stock()).place(x=40, y=49)
            Button(new_frame, text='  Return request       ', font=('arial', 9, 'bold'), image=photo2, compound='left',
                   bg='#B4F8C8', relief=RAISED, activebackground='red', command=lambda: req_return()).place(x=305, y=212)
            Button(new_frame, text='  Databases                ', font=('arial', 9, 'bold'), image=customer_data,
                   compound='left',
                   bg='#B4F8C8', activebackground='red', relief=RAISED, command=lambda: create2()).place(x=305, y=376)

    elif username.get() == "" or password.get() == "":
        messagebox.showerror("ERROR", "Please Insert username/password")
    else:
        messagebox.showerror("ERROR", "Wrong username/password")


def delete():
    username_terminal.delete(0, END)
    password_terminal.delete(0, END)


def req_return():
    new = Toplevel(main)
    new.geometry('710x620')
    new.resizable(FALSE, FALSE)
    new.title("RETURN DATABASE")
    cursordb.execute('SELECT * FROM return_database')

    def filterTeeView(*args):
        ItemsOnTreeview = treeview.get_children()

        search = search_var.get()
        for z in ItemsOnTreeview:
            if search in treeview.item(z)['values'][1]:
                search_var_m = treeview.item(z)['values']
                treeview.delete(z)

                treeview.insert('', 0, values=search_var_m)

    def add_data():
        n_r_ID = r_id.get()
        n_order = o_id.get()
        n_product = product.get()
        n_reason = reason.get()
        n_quantity = quantity.get()
        n_date = date.get()
        n_status = status.get()
        cursordb.execute(
            'INSERT INTO return_database(return_ID, order_ID, product, reason , quantity, date, '
            'status)VALUES(%s, %s, %s, %s, %s, %s, %s)',
            (n_r_ID, n_order, n_product, n_reason, n_quantity, n_date, n_status))

        main_database.commit()
        treeview.insert('', END, values=(n_r_ID, n_order, n_product, n_reason, n_quantity, n_date, n_status))

    def update_data():
        selected = treeview.selection()[0]
        n_r_ID = r_id.get()
        n_order = o_id.get()
        n_product = product.get()
        n_reason = reason.get()
        n_quantity = quantity.get()
        n_date = date.get()
        n_status = status.get()
        sql = 'UPDATE return_database SET order_ID=%s, product=%s, reason=%s, ' \
              'quantity=%s, date=%s, status=%s WHERE return_ID=%s '
        value = (n_order, n_product, n_reason, n_quantity, n_date, n_status, n_r_ID)
        cursordb.execute(sql, value)
        main_database.commit()

        treeview.delete(selected)
        treeview.insert('', END, values=(n_r_ID, n_order, n_product, n_reason, n_quantity, n_date, n_status))

    def delete_data(tree):
        selected = treeview.selection()[0]
        n_r_ID = r_id.get()
        query = """Delete From return_database where return_ID=%s"""
        value = (n_r_ID,)
        cursordb.execute(query, value)
        main_database.commit()
        treeview.delete(selected)

    # entry frame
    topframe = Frame(new, bg='white')
    topframe.place(x=5, y=12, width=400, height=80)
    # tree frame
    tree_frame = Frame(new, bg='green')
    tree_frame.place(x=5, y=300, width=700, height=300)
    new.iconphoto(True, employee_icon)
    Label(new, text="Returns     ", font=('Arial', 15, 'bold'), fg='white', background='black', relief=SUNKEN, bd=5,
          padx=32, image=employee_icon, compound='left').place(x=415, y=6)

    # search by text
    lb1 = Label(topframe, text="Check returns:", fg='black', bg='white')
    lb1.place(x=10, y=32)
    search_var = StringVar()
    # entry terminal
    entry = Entry(topframe, textvariable=search_var, font=('Arial', 15, 'bold'))
    entry.place(x=95, y=30)
    search_var.trace('w', filterTeeView)

    # treeview
    column = ["return_ID", "order_ID", "product", "reason", "quantity", "date",
              "status"]
    treeview = ttk.Treeview(tree_frame, height=100, column=column)
    treeview.pack(fill='both')
    treeview['show'] = 'headings'
    for x in column:
        treeview.column(x, width=80)
        treeview.heading(x, text=x.capitalize())

    # inserting data
    for i in cursordb:
        treeview.insert('', END, values=i)

    function_frm = Frame(new, bg='white', width=700, height=180)
    function_frm.place(x=5, y=110)
    Label(function_frm, text='return_ID:', font=('arial', 9, 'bold'), bg='white').place(x=10, y=20)
    r_id = IntVar()
    Label(function_frm, text='Order ID:', font=('arial', 9, 'bold'), bg='white').place(x=10, y=60)
    o_id = StringVar()
    Label(function_frm, text='Product:', font=('arial', 9, 'bold'), bg='white').place(x=10, y=100)
    product = StringVar()
    Label(function_frm, text='Reason:', font=('arial', 9, 'bold'), bg='white').place(x=260, y=20)
    reason = StringVar()
    Label(function_frm, text='Quantity:', font=('arial', 9, 'bold'), bg='white').place(x=260, y=60)
    quantity = StringVar()
    Label(function_frm, text='Date:', font=('arial', 9, 'bold'), bg='white').place(x=260, y=100)
    date = StringVar()
    Label(function_frm, text='Status:', font=('arial', 9, 'bold'), bg='white').place(x=480, y=20)
    status = StringVar()

    e1 = Entry(function_frm, textvariable=r_id)
    e1.place(x=80, y=20)
    e2 = Entry(function_frm, textvariable=o_id)
    e2.place(x=80, y=60)
    e3 = Entry(function_frm, textvariable=product)
    e3.place(x=80, y=100)
    e4 = Entry(function_frm, textvariable=reason)
    e4.place(x=330, y=20)
    e5 = Entry(function_frm, textvariable=quantity)
    e5.place(x=330, y=60)
    e6 = Entry(function_frm, textvariable=date)
    e6.place(x=330, y=100)
    e7 = Entry(function_frm, textvariable=status)
    e7.place(x=550, y=20)

    btn1 = Button(function_frm, text='Add', bg='green', fg='white', activeforeground='white', activebackground='green',
                  command=lambda: add_data(), width=25)
    btn1.place(x=30, y=140)
    btn2 = Button(function_frm, text='cancel', bg='red', fg='white', activeforeground='white', activebackground='red',
                  command=lambda: delete_data(treeview), width=25)
    btn2.place(x=250, y=140)
    btn3 = Button(function_frm, text='update', bg='yellow', fg='black', activeforeground='yellow',
                  activebackground='black', command=lambda: update_data(), width=25)
    btn3.place(x=470, y=140)


def shipping_data():
    new = Toplevel(main)
    new.geometry('710x620')
    new.resizable(FALSE, FALSE)
    new.title("shipping")
    cursordb.execute('SELECT * FROM shipping_database')

    def filterTeeView(*args):
        ItemsOnTreeview = treeview.get_children()

        search = search_var.get()
        for z in ItemsOnTreeview:
            if search in treeview.item(z)['values'][1]:
                search_var_m = treeview.item(z)['values']
                treeview.delete(z)

                treeview.insert('', 0, values=search_var_m)

    def add_data():
        n_s_ID = Shipping_id.get()
        n_Product = Product.get()
        n_Status = Status.get()
        n_Quantity = Quantity.get()
        n_Date = Date.get()
        cursordb.execute(
            'INSERT INTO shipping_database(Shipping_ID, Product, Status, Quantity , Date)VALUES(%s, %s, %s, %s, %s)',
            (n_s_ID, n_Product, n_Status, n_Quantity, n_Date))

        main_database.commit()
        treeview.insert('', END, values=(n_s_ID, n_Product, n_Status, n_Quantity, n_Date))

    def update_data():
        selected = treeview.selection()[0]
        n_s_ID = Shipping_id.get()
        n_Product = Product.get()
        n_Status = Status.get()
        n_Quantity = Quantity.get()
        n_Date = Date.get()
        SQL = 'UPDATE shipping_database SET Product=%s, Status=%s, Quantity=%s, Date=%s WHERE Shipping_ID=%s'
        value = (n_Product, n_Status, n_Quantity, n_Date, n_s_ID)
        cursordb.execute(SQL, value)
        main_database.commit()

        treeview.delete(selected)
        treeview.insert('', END, values=(n_s_ID, n_Product, n_Status, n_Quantity, n_Date))

    def delete_data(tree):
        selected = treeview.selection()[0]
        n_s_ID = Shipping_id.get()
        query = """Delete From shipping_database where Shipping_ID=%s"""
        value = (n_s_ID,)
        cursordb.execute(query, value)
        main_database.commit()
        treeview.delete(selected)

    # entry frame
    topframe = Frame(new, bg='white')
    topframe.place(x=5, y=12, width=400, height=80)
    # tree frame
    tree_frame = Frame(new, bg='green')
    tree_frame.place(x=5, y=300, width=700, height=300)
    new.iconphoto(True, employee_icon)
    Label(new, text="Shipping   ", font=('Arial', 15, 'bold'), fg='white', background='#6998AB', relief=FLAT, bd=5,
          padx=32, image=employee_icon, compound='left').place(x=415, y=6)

    # search by text
    lb1 = Label(topframe, text="Check returns:", fg='black', bg='white')
    lb1.place(x=10, y=32)
    search_var = StringVar()
    # entry terminal
    entry = Entry(topframe, textvariable=search_var, font=('Arial', 15, 'bold'))
    entry.place(x=95, y=30)
    search_var.trace('w', filterTeeView)

    # treeview
    column = ["Shipping ID", "Product", "Status", "Quantity", "Date"]
    treeview = ttk.Treeview(tree_frame, height=100, column=column)
    treeview.pack(fill='both')
    treeview['show'] = 'headings'
    for x in column:
        treeview.column(x, width=80)
        treeview.heading(x, text=x.capitalize())

    # inserting data
    for i in cursordb:
        treeview.insert('', END, values=i)

    function_frm = Frame(new, bg='white', width=700, height=180)
    function_frm.place(x=5, y=110)
    Label(function_frm, text='Shipping ID:', font=('arial', 9, 'bold'), bg='white').place(x=10, y=20)
    Shipping_id = IntVar()
    Label(function_frm, text='Product:', font=('arial', 9, 'bold'), bg='white').place(x=10, y=60)
    Product = StringVar()
    Label(function_frm, text='Status:', font=('arial', 9, 'bold'), bg='white').place(x=10, y=100)
    Status = StringVar()
    Label(function_frm, text='Quantity:', font=('arial', 9, 'bold'), bg='white').place(x=260, y=20)
    Quantity = IntVar()
    Label(function_frm, text='Date:', font=('arial', 9, 'bold'), bg='white').place(x=260, y=60)
    Date = StringVar()

    e1 = Entry(function_frm, textvariable=Shipping_id)
    e1.place(x=80, y=20)
    e2 = Entry(function_frm, textvariable=Product)
    e2.place(x=80, y=60)
    e3 = Entry(function_frm, textvariable=Status)
    e3.place(x=80, y=100)
    e4 = Entry(function_frm, textvariable=Quantity)
    e4.place(x=330, y=20)
    e5 = Entry(function_frm, textvariable=Date)
    e5.place(x=330, y=60)

    btn1 = Button(function_frm, text='Add', bg='green', fg='white', activeforeground='white', activebackground='green',
                  command=lambda: add_data(), width=25)
    btn1.place(x=30, y=140)
    btn2 = Button(function_frm, text='delete', bg='red', fg='white', activeforeground='white', activebackground='red',
                  command=lambda: delete_data(treeview), width=25)
    btn2.place(x=250, y=140)
    btn3 = Button(function_frm, text='update', bg='yellow', fg='black', activeforeground='yellow',
                  activebackground='black', command=lambda: update_data(), width=25)
    btn3.place(x=470, y=140)


def create2():
    new = Toplevel(main)
    new.geometry('710x440')
    new.resizable(FALSE, FALSE)
    new.title("CUSTOMER DATABASE")
    cursordb.execute('SELECT * FROM customer_database')

    def filterTeeView(*args):
        ItemsOnTreeview = treeview.get_children()

        search = search_var.get()
        for z in ItemsOnTreeview:
            if search in treeview.item(z)['values'][1]:
                search_var_m = treeview.item(z)['values']
                treeview.delete(z)

                treeview.insert('', 0, values=search_var_m)

    # entry frame
    topframe = Frame(new, bg='white')
    topframe.place(x=5, y=10, width=400, height=80)
    # tree frame
    tree_frame = Frame(new, bg='green')
    tree_frame.place(x=5, y=100, width=700, height=300)
    new.iconphoto(True, customer_icon)
    Label(new, text="Customers", font=('Arial', 15, 'bold'), fg='white', background='black', relief=SUNKEN, bd=5,
          padx=32, image=customer_icon, compound='left').place(x=415, y=6)

    # search by text
    lb1 = Label(topframe, text="Search Name:", fg='black', bg='white')
    lb1.place(x=10, y=32)
    search_var = StringVar()
    # entry terminal
    entry = Entry(topframe, textvariable=search_var, font=('Arial', 15, 'bold'))
    entry.place(x=95, y=30)
    search_var.trace('w', filterTeeView)

    # treeview
    column = ["Customer ID", "Customer name", "Nationality", "Adress", "Contact number", "Last visit", "Email",
              "Loyalty count"]
    treeview = ttk.Treeview(tree_frame, height=100, column=column)
    treeview.pack(fill='both')
    treeview['show'] = 'headings'
    for x in column:
        treeview.column(x, width=80)
        treeview.heading(x, text=x.capitalize())

    # inserting data
    for i in cursordb:
        treeview.insert('', END, values=i)


def update_stock():
    new = Toplevel(main)
    new.geometry('800x650')
    new.resizable(FALSE, FALSE)
    new.title("UPDATE CUSTOMER DATABASE")
    cursordb.execute('SELECT * FROM stock_management')
    new.config(bg="#FBE7C6")

    def add_data():
        n_s_no = s_no.get()
        n_Item_name = Item_name.get()
        n_Quantity = Quantity.get()
        n_Unit_price = Unit_price.get()
        n_Sold = Sold.get()
        n_discount = discount.get()
        cursordb.execute(
            'INSERT INTO stock_management(s_no, Item_name, Quantity, Unit_price, Sold, Discount)VALUES(%s, %s, %s, '
            '%s, %s, %s)', (n_s_no, n_Item_name, n_Quantity, n_Unit_price, n_Sold, n_discount))

        main_database.commit()
        treeview.insert('', END, values=(n_s_no, n_Item_name, n_Quantity, n_Unit_price, n_Sold, n_discount))

    def update_data():
        selected = treeview.selection()[0]
        n_s_no = s_no.get()
        n_Item_name = Item_name.get()
        n_Quantity = Quantity.get()
        n_Unit_price = Unit_price.get()
        n_Sold = Sold.get()
        n_discount = discount.get()
        sql = 'UPDATE stock_management SET Item_name=%s, Quantity=%s, Unit_price=%s,Sold=%s, Discount=%s WHERE s_no=%s'
        value = (n_Item_name, n_Quantity, n_Unit_price, n_Sold, n_discount, n_s_no)
        cursordb.execute(sql, value)
        main_database.commit()

        treeview.delete(selected)
        treeview.insert('', END, values=(n_s_no, n_Item_name, n_Quantity, n_Unit_price, n_Sold, n_discount))

    def delete_data(tree):
        selected = treeview.selection()[0]
        n_s_no = s_no.get()
        query = """Delete From stock_management where s_no=%s"""
        value = (n_s_no,)
        cursordb.execute(query, value)
        main_database.commit()
        treeview.delete(selected)

    def filterTeeView(*args):
        ItemsOnTreeview = treeview.get_children()

        search = search_var.get()
        for z in ItemsOnTreeview:
            if search in treeview.item(z)['values'][1]:
                search_var_m = treeview.item(z)['values']
                treeview.delete(z)

                treeview.insert('', 0, values=search_var_m)

    ent_frm = Frame(new, bg='white', height=230, width=300)
    ent_frm.place(x=40, y=130)
    Label(ent_frm, text='S.No:', font=('arial', 10, 'bold'), bg='white').place(x=10, y=10)
    Label(ent_frm, text='Item name:', font=('arial', 10, 'bold'), bg='white').place(x=10, y=50)
    Label(ent_frm, text='Quantity:', font=('arial', 10, 'bold'), bg='white').place(x=10, y=90)
    Label(ent_frm, text='Unit price:', font=('arial', 10, 'bold'), bg='white').place(x=10, y=130)
    Label(ent_frm, text='Sold:', font=('arial', 10, 'bold'), bg='white').place(x=10, y=170)
    Label(ent_frm, text='Discount:', font=('arial', 10, 'bold'), bg='white').place(x=10, y=200)

    s_no = IntVar()
    terminal1 = Entry(ent_frm, textvariable=s_no)
    Item_name = StringVar()
    terminal2 = Entry(ent_frm, textvariable=Item_name)
    Quantity = StringVar()
    terminal3 = Entry(ent_frm, textvariable=Quantity)
    Unit_price = StringVar()
    terminal4 = Entry(ent_frm, textvariable=Unit_price)
    Sold = IntVar()
    terminal5 = Entry(ent_frm, textvariable=Sold)
    discount = IntVar()
    terminal6 = Entry(ent_frm, textvariable=discount)

    terminal1.place(x=70, y=10)
    terminal2.place(x=90, y=50)
    terminal3.place(x=80, y=90)
    terminal4.place(x=100, y=130)
    terminal5.place(x=60, y=170)
    terminal6.place(x=80, y=200)

    # treeview frame
    tree_frame = Frame(new, bg='white')
    tree_frame.place(x=40, y=390, width=720, height=220)
    # treeview
    column = ["s_no", "Item_name", "Quantity", "Unit_price", "Sold", "Discount"]
    treeview = ttk.Treeview(tree_frame, height=100, column=column)
    treeview.pack(fill='both')
    treeview['show'] = 'headings'

    for x in column:
        treeview.column(x, width=80)
        treeview.heading(x, text=x.capitalize())

    # inserting data
    for i in cursordb:
        treeview.insert('', END, values=i)

    # title
    title_frm = Frame(new, bg='white', height=90, width=700)
    title_frm.place(x=40, y=20)
    Label(title_frm, text='STOCK MANAGEMENT', font=('arial', 40, 'bold'), bg='white').place(x=50, y=10)

    # search frame
    search_var = StringVar()
    s_frm = Frame(new, bg='white', height=70, width=390)
    s_frm.place(x=360, y=290)
    Label(s_frm, text='Check Stock:', bg='white', fg='black', font=('arial', 9, 'bold')).place(x=10, y=20)
    search_box = Entry(s_frm, textvariable=search_var, width=40)
    search_box.place(x=100, y=20)
    search_var.trace('w', filterTeeView)

    # button frame
    b_frm = Frame(new, bg='white', height=130, width=390)
    b_frm.place(x=360, y=130)
    Button(b_frm, text='Add', bg='green', fg='white', activeforeground='white',
           activebackground='green', height=2, width=22, font=('arial', 9, 'bold'),
           command=lambda: add_data()).place(x=20, y=10)
    Button(b_frm, text='delete', bg='red', fg='white', activeforeground='white',
           activebackground='red', height=2, width=22, font=('arial', 9, 'bold'),
           command=lambda: delete_data(treeview)).place(x=210, y=10)
    Button(b_frm, text='update', bg='yellow', fg='black', activeforeground='black',
           activebackground='yellow', height=2, width=32, font=('arial', 9, 'bold'),
           command=lambda: update_data()).place(x=80, y=70)


def update_employee():
    new = Toplevel(main)
    new.geometry('1100x650')
    new.resizable(FALSE, FALSE)
    new.title("EMPLOYEE MANAGEMENT")
    new.config(bg="#FBE7C6")
    cursordb.execute('SELECT * FROM employee_database')

    def add_data():
        n_Employee_ID = Employee_ID.get()
        n_Full_name = Full_name.get()
        n_Gender = Gender.get()
        n_Department = Department.get()
        n_Contact_number = Contact_number.get()
        n_Address = Address.get()
        n_email = Email.get()
        n_Absents = Absents.get()
        cursordb.execute(
            'INSERT INTO employee_database(Employee_ID, Full_name, Gender, Department, Contact_number, Address, '
            'Email, Absents)VALUES(%s, %s, %s, %s, %s, %s, %s, %s)',
            (n_Employee_ID, n_Full_name, n_Gender, n_Department,
             n_Contact_number, n_Address, n_email,
             n_Absents))

        main_database.commit()
        treeview.insert('', END, values=(n_Employee_ID, n_Full_name, n_Gender, n_Department,
                                         n_Contact_number, n_Address, n_email, n_Absents))

    def update_data():
        selected = treeview.selection()[0]
        n_Employee_ID = Employee_ID.get()
        n_Full_name = Full_name.get()
        n_Gender = Gender.get()
        n_Department = Department.get()
        n_Contact_number = Contact_number.get()
        n_Address = Address.get()
        n_email = Email.get()
        n_Absents = Absents.get()
        sql = 'UPDATE employee_database SET Full_name=%s, Gender=%s, Department=%s, Contact_number=%s,Address=%s, ' \
              'Email=%s, Absents=%s WHERE Employee_ID=%s '
        value = (n_Full_name, n_Gender, n_Department, n_Contact_number, n_Address, n_email, n_Absents, n_Employee_ID)
        cursordb.execute(sql, value)
        main_database.commit()

        treeview.delete(selected)
        treeview.insert('', END, values=(n_Employee_ID, n_Full_name, n_Gender, n_Department, n_Contact_number,
                                         n_Address, n_email, n_Absents))

    def delete_data(tree):
        selected = treeview.selection()[0]
        n_Full_name = Full_name.get()
        query = """Delete From employee_database where Full_name=%s"""
        value = (n_Full_name,)
        cursordb.execute(query, value)
        main_database.commit()
        treeview.delete(selected)

    def filterTeeView(*args):
        ItemsOnTreeview = treeview.get_children()

        search = search_var.get()
        for z in ItemsOnTreeview:
            if search in treeview.item(z)['values'][1]:
                search_var_m = treeview.item(z)['values']
                treeview.delete(z)

                treeview.insert('', 0, values=search_var_m)

    # user input frame
    frm1 = Frame(new, height=600, width=350, bg='white')
    frm1.place(x=20, y=20)
    Button(frm1, text='Add', bg='green', fg='white', activeforeground='white',
           activebackground='green', height=2, width=22, font=('arial', 9, 'bold'), command=lambda: add_data()).place(
        x=10, y=500)
    Button(frm1, text='Delete', bg='red', fg='white', activeforeground='white',
           activebackground='red', height=2, width=20, font=('arial', 9, 'bold'),
           command=lambda: delete_data(treeview)).place(x=190, y=500)
    Button(frm1, text='Update', bg='yellow', fg='black', activeforeground='black',
           activebackground='yellow', height=2, width=46, font=('arial', 9, 'bold'),
           command=lambda: update_data()).place(x=10, y=550)
    Label(frm1, text='Employee_ID', font=('arial', 9, 'bold')).place(x=10, y=10)
    Employee_ID = IntVar()
    e1 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Employee_ID)
    e1.place(x=10, y=30)
    Full_name = StringVar()
    Label(frm1, text='Full_name', font=('arial', 9, 'bold')).place(x=10, y=70)
    e2 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Full_name)
    e2.place(x=10, y=90)
    Gender = StringVar()
    Label(frm1, text='Gender', font=('arial', 9, 'bold')).place(x=10, y=120)
    e3 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Gender)
    e3.place(x=10, y=150)
    Department = StringVar()
    Label(frm1, text='Department', font=('arial', 9, 'bold')).place(x=10, y=190)
    e4 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Department)
    e4.place(x=10, y=220)
    Contact_number = StringVar()
    Label(frm1, text='Contact_number', font=('arial', 9, 'bold')).place(x=10, y=250)
    e5 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Contact_number)
    e5.place(x=10, y=280)
    Address = StringVar()
    Label(frm1, text='Address', font=('arial', 9, 'bold')).place(x=10, y=310)
    e6 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Address)
    e6.place(x=10, y=340)
    Email = StringVar()
    Label(frm1, text='Email', font=('arial', 9, 'bold')).place(x=10, y=370)
    e7 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Email)
    e7.place(x=10, y=400)
    Absents = IntVar()
    Label(frm1, text='Absents', font=('arial', 9, 'bold')).place(x=10, y=430)
    e8 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Absents)
    e8.place(x=10, y=460)

    # treeview frame
    tree_frame = Frame(new, bg='white')
    tree_frame.place(x=380, y=200, width=700, height=420)
    # treeview
    column = ["Employee_ID", "Full_name", "Gender", "Department", "Contact_number", "Address", "Email",
              "Absents"]
    treeview = ttk.Treeview(tree_frame, height=100, column=column)
    treeview.pack(fill='both')
    treeview['show'] = 'headings'

    for x in column:
        treeview.column(x, width=80)
        treeview.heading(x, text=x.capitalize())

    # inserting data
    for i in cursordb:
        treeview.insert('', END, values=i)
    # title frame
    topframe = Frame(new, bg='white')
    topframe.place(x=380, y=20, width=700, height=80)
    Label(topframe, text='UPDATE EMPLOYEE', font=('arial', 20, 'bold'), fg='black', bg='white', image=check_employee,
          compound='left').pack()
    # search frame
    search_var = StringVar()
    sframe = Frame(new, bg='black')
    sframe.place(x=380, y=120, width=340, height=70)
    # search by text
    lb1 = Label(sframe, text="Search Name:", fg='black', bg='white')
    lb1.place(x=10, y=32)
    search_var.trace('w', filterTeeView)
    # entry terminal
    entry = Entry(sframe, textvariable=search_var, font=('Arial', 15, 'bold'))
    entry.place(x=95, y=30)


def update_customer():
    new = Toplevel(main)
    new.geometry('1200x650')
    new.resizable(FALSE, FALSE)
    new.title("CUSTOMER MANAGEMENT")
    new.config(bg="#FBE7C6")
    cursordb.execute('SELECT * FROM customer_database')

    def add_data():
        n_Customer_ID = Customer_ID.get()
        n_Customer_name = Customer_name.get()
        n_Nationality = Nationality.get()
        n_Address = Address.get()
        n_Contact_number = Contact_number.get()
        n_Last_visit = Last_visit.get()
        n_Email = Email.get()
        n_Loyalty_count = Loyalty_count.get()
        cursordb.execute(
            'INSERT INTO customer_database(Customer_ID, Customer_name, Nationality, Adress, Contact_number, '
            'Last_visit, ''Email, Loyalty_count)VALUES(%s, %s, %s, %s, %s, %s, %s, %s)',
            (n_Customer_ID, n_Customer_name, n_Nationality, n_Address,
             n_Contact_number, n_Last_visit, n_Email,
             n_Loyalty_count))

        main_database.commit()
        treeview.insert('', END, values=(n_Customer_ID, n_Customer_name, n_Nationality, n_Address,
                                         n_Contact_number, n_Last_visit, n_Email, n_Loyalty_count))

    def update_data():
        selected = treeview.selection()[0]
        n_Customer_ID = Customer_ID.get()
        n_Customer_name = Customer_name.get()
        n_Nationality = Nationality.get()
        n_Address = Address.get()
        n_Contact_number = Contact_number.get()
        n_Last_visit = Last_visit.get()
        n_Email = Email.get()
        n_Loyalty_count = Loyalty_count.get()
        sql = 'UPDATE customer_database SET Customer_name=%s, Nationality=%s, Adress=%s, Contact_number=%s, ' \
              'Last_visit=%s, Email=%s, Loyalty_count=%s WHERE Customer_ID=%s '
        value = (n_Customer_name, n_Nationality, n_Address,n_Contact_number, n_Last_visit, n_Email,
                 n_Loyalty_count, n_Customer_ID)
        cursordb.execute(sql, value)
        main_database.commit()

        treeview.delete(selected)
        treeview.insert('', END, values=(n_Customer_ID, n_Customer_name, n_Nationality, n_Address,
                                         n_Contact_number, n_Last_visit, n_Email,n_Loyalty_count))

    def delete_data(tree):
        selected = treeview.selection()[0]
        n_Customer_name = Customer_name.get()
        query = """Delete From customer_database where Customer name=%s"""
        value = (n_Customer_name,)
        cursordb.execute(query, value)
        main_database.commit()
        treeview.delete(selected)

    def filterTeeView(*args):
        ItemsOnTreeview = treeview.get_children()

        search = search_var.get()
        for z in ItemsOnTreeview:
            if search in treeview.item(z)['values'][1]:
                search_var_m = treeview.item(z)['values']
                treeview.delete(z)

                treeview.insert('', 0, values=search_var_m)

    # user input frame
    frm1 = Frame(new, height=600, width=350, bg='white')
    frm1.place(x=20, y=20)
    Button(frm1, text='Add', bg='green', fg='white', activeforeground='white',
           activebackground='green', height=2, width=22, font=('arial', 9, 'bold'), command=lambda: add_data()).place(
        x=10, y=500)
    Button(frm1, text='Delete', bg='red', fg='white', activeforeground='white',
           activebackground='red', height=2, width=20, font=('arial', 9, 'bold'),
           command=lambda: delete_data(treeview)).place(x=190, y=500)
    Button(frm1, text='Update', bg='yellow', fg='black', activeforeground='black',
           activebackground='yellow', height=2, width=46, font=('arial', 9, 'bold'),
           command=lambda: update_data()).place(x=10, y=550)
    Label(frm1, text='Customer ID', font=('arial', 9, 'bold')).place(x=10, y=10)
    Customer_ID = IntVar()
    e1 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Customer_ID)
    e1.place(x=10, y=30)
    Customer_name = StringVar()
    Label(frm1, text='Customer name', font=('arial', 9, 'bold')).place(x=10, y=70)
    e2 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Customer_name)
    e2.place(x=10, y=90)
    Nationality = StringVar()
    Label(frm1, text='Nationality', font=('arial', 9, 'bold')).place(x=10, y=120)
    e3 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Nationality)
    e3.place(x=10, y=150)
    Address = StringVar()
    Label(frm1, text='Address', font=('arial', 9, 'bold')).place(x=10, y=190)
    e4 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Address)
    e4.place(x=10, y=220)
    Contact_number = StringVar()
    Label(frm1, text='Contact number', font=('arial', 9, 'bold')).place(x=10, y=250)
    e5 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Contact_number)
    e5.place(x=10, y=280)
    Last_visit = StringVar()
    Label(frm1, text='Last visit', font=('arial', 9, 'bold')).place(x=10, y=310)
    e6 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Last_visit)
    e6.place(x=10, y=340)
    Email = StringVar()
    Label(frm1, text='Email', font=('arial', 9, 'bold')).place(x=10, y=370)
    e7 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Email)
    e7.place(x=10, y=400)
    Loyalty_count = IntVar()
    Label(frm1, text='Loyalty count', font=('arial', 9, 'bold')).place(x=10, y=430)
    e8 = Entry(frm1, font=('arial', 10, 'bold'), textvariable=Loyalty_count)
    e8.place(x=10, y=460)

    # treeview frame
    tree_frame = Frame(new, bg='white')
    tree_frame.place(x=380, y=200, width=800, height=420)
    # treeview
    column = ["Customer ID", "Customer name", "Nationality", "Address", "Contact number", "Last visit", "Email",
              "Loyalty count"]
    treeview = ttk.Treeview(tree_frame, height=100, column=column)
    treeview.pack(fill='both')
    treeview['show'] = 'headings'

    for x in column:
        treeview.column(x, width=80)
        treeview.heading(x, text=x.capitalize())

    # inserting data
    for i in cursordb:
        treeview.insert('', END, values=i)
    # title frame
    topframe = Frame(new, bg='white')
    topframe.place(x=380, y=20, width=800, height=80)
    Label(topframe, text='CUSTOMER MANAGEMENT', font=('arial', 20, 'bold'), fg='black', bg='white',
          image=check_employee,
          compound='left').pack()
    # search frame
    search_var = StringVar()
    sframe = Frame(new, bg='black')
    sframe.place(x=380, y=120, width=340, height=70)
    # search by text
    lb1 = Label(sframe, text="Search Name:", fg='black', bg='white')
    lb1.place(x=10, y=32)
    search_var = StringVar()
    search_var.trace('w', filterTeeView)
    # entry terminal
    entry = Entry(sframe, textvariable=search_var, font=('Arial', 15, 'bold'))
    entry.place(x=95, y=30)


main = Tk()
main.geometry("650x600")
main.resizable(FALSE, FALSE)
main.config(bg="#064663")
main.title("LOGIN")
icon = PhotoImage(file='user.png')
main.iconphoto(True, icon)
Check_Stocks = PhotoImage(file='check stock.png')
photo1 = PhotoImage(file='Hnet.com-imagemain.png')
photo2 = PhotoImage(file='database png.png')
check_employee = PhotoImage(file='background check.png')
customer_check = PhotoImage(file='customer check.png')
customer_data = PhotoImage(file='database for customer.png')
employee_icon = PhotoImage(file='employee (1).png')
stock_icon = PhotoImage(file='inventory (1).png')
customer_icon = PhotoImage(file='male-customer (1).png')

frame = Frame(main, bg="white", width=370, height=500, relief=SUNKEN, bd=5)
frame.place(x=265, y=50)

icon = PhotoImage(file='Webp.net-resizeimage.png')
label = Label(main, background='#064663', image=icon, compound='bottom')
label.place(x=80, y=200)

user = Label(frame, text='USERNAME:', font=('arial', 16, 'bold'), bg="white")
passw = Label(frame, text='PASSWORD:', font=('arial', 16, 'bold'), bg="white")
user.place(x=20, y=68)
passw.place(x=20, y=220)

username = StringVar()
password = StringVar()

username_terminal = Entry(frame, textvariable=username, width=14, bd=2, font=('arial', 30))
username_terminal.place(x=20, y=120)

password_terminal = Entry(frame, textvariable=password, width=14, bd=2, font=('arial', 30), show='*')
password_terminal.place(x=20, y=280)

login_button = Button(frame, text='Login', height='2', width=20, bg='#189AB4', fg='#D4F1F4', bd=0,
                      activebackground='#189AB4', activeforeground='#D4F1F4', command=login_verification)
login_button.place(x=20, y=420)
del_button = Button(frame, text='Clear', height='2', width=20, bg='#189AB4', fg='#D4F1F4', bd=0,
                    activebackground='#189AB4', activeforeground='#D4F1F4', command=delete)
del_button.place(x=20, y=360)

main.mainloop()
